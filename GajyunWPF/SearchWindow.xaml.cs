using GajyunETL;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using static GajyunWPF.Settings;



namespace GajyunWPF
{
    public partial class SearchWindow : Window
    {
        private string _connectionString;
        private AppSettings _settings;
        private LogService _logService;
        private PdfProcessor _pdfProcessor;
        private CsvProcessor _csvProcessor;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SearchWindow(string connectionString)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            InitializeComponent();
            _connectionString = connectionString;
            LoadSettings(); // Carrega as configurações ao iniciar
            InitializeServices();  // Assegura a inicialização dos serviços necessários
            SetDatePickersToToday();
        }
        private void SetDatePickersToToday()
        {
            // Supondo que seus DatePicker se chamem CheckInDatePicker e CheckOutDatePicker
            CheckInDatePicker.SelectedDate = DateTime.Today;
        }

        private void InitializeServices()
        {
            try
            {
                Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
                _connectionString = "Server=localhost;Database=GajyunDb;Trusted_Connection=True;TrustServerCertificate=True;";

                _logService = new LogService(_connectionString);
                _csvProcessor = new CsvProcessor(_connectionString, _logService);
                _pdfProcessor = new PdfProcessor(_connectionString, _settings.FilePaths.PdfFolderPath, _logService);
            }
            catch (Exception ex)
            {
                LogError(ex); // Log any initialization errors.
                MessageBox.Show("サービスの初期化中にエラーが発生しました。エラーログを確認してください。"); // An error occurred during service initialization. Please check the error log.
            }
        }

        private void LoadSettings()
        {
            // Supondo que você tem o caminho do arquivo de configurações acessível aqui
            _settings = AppSettings.Load(@"..\..\..\..\GajyunETL\bin\Debug\net8.0\appsettings.json");
        }

        private void LogError(Exception ex)
        {
            var logPath = "errorLog.txt"; // O caminho para o arquivo de log de erro.
            var message = $"{DateTime.Now}: {ex.ToString()}\n"; // Formata a mensagem de log com a data atual e a exceção.
            File.AppendAllText(logPath, message); // Escreve a mensagem de log no arquivo, anexando ao conteúdo existente.
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            // Obter valores dos controles de entrada
            string reservationCode = ReservationCodeTextBox.Text;
            DateTime? checkInDate = CheckInDatePicker.SelectedDate;
            DateTime? checkOutDate = CheckOutDatePicker.SelectedDate;
            string guestName = GuestNameTextBox.Text;

            Search(reservationCode, checkInDate, checkOutDate, guestName);
        }

        private void ResultsDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var dataGrid = sender as DataGrid;
            if (dataGrid != null && dataGrid.Columns.Count > 0)
            {
                // Estilo da primeira coluna
                dataGrid.Columns[0].CellStyle = new Style(typeof(DataGridCell))
                {
                    Setters = {
                new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center)
            },
                    Triggers = {
                new DataTrigger
                {
                    Binding = new Binding("ID"), // Ajuste para o nome correto do campo
                    Value = "O",
                    Setters = {
                        new Setter(TextBlock.ForegroundProperty, Brushes.Green)
                    }
                },
                new DataTrigger
                {
                    Binding = new Binding("ID"), // Ajuste para o nome correto do campo
                    Value = "X",
                    Setters = {
                        new Setter(TextBlock.ForegroundProperty, Brushes.Red)
                    }
                }
            }
                };

                // Ordenação por "チェックイン日" e "宿泊者氏名"
                dataGrid.Items.SortDescriptions.Clear();
                dataGrid.Items.SortDescriptions.Add(new SortDescription("チェックイン日", ListSortDirection.Ascending)); // Ajuste para o nome real da propriedade
                dataGrid.Items.SortDescriptions.Add(new SortDescription("宿泊者氏名", ListSortDirection.Ascending)); // Ajuste para o nome real da propriedade

                dataGrid.Items.Refresh();
            }
        }





        public void Search(string reservationCode, DateTime? checkInDate, DateTime? checkOutDate, string guestName)
        {
            var query = @"
                    SELECT  CASE WHEN [pdf_file] IS NOT NULL THEN 'O' ELSE 'X' END AS ID,
                            [予約サイト名],[予約番号],[予約日時],[予約区分],[チェックイン日],[チェックアウト日],[宿泊者氏名],[部屋名称]
                            ,[部屋数],[大人人数],[子供人数],[合計料金],[請求料金],[支払方法],[泊数],[変更日時],[宿泊者氏名カナ]
                            ,[住所],[電話番号],[メールアドレス],[備考],[部屋マスタ],[連泊情報],[詳細]
                            
                            ,[pdf_date] AS PDF_ImportDate,[CreatedDate] AS InfoImported_Date,[UpdatedDate] AS Updated_Date
                     FROM [GajyunDb].[dbo].[Booking_Data]
                     WHERE ([予約番号] = @ReservationCode OR @ReservationCode IS NULL)
                     AND ([チェックイン日] = @CheckInDate OR @CheckInDate IS NULL)
                     AND ([宿泊者氏名] LIKE '%' + @GuestName + '%' OR @GuestName IS NULL);
                        ";

            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@ReservationCode", string.IsNullOrEmpty(reservationCode) ? (object)DBNull.Value : reservationCode);
                command.Parameters.AddWithValue("@CheckInDate", checkInDate ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@CheckOutDate", checkOutDate ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@GuestName", string.IsNullOrEmpty(guestName) ? (object)DBNull.Value : guestName);

                var adapter = new SqlDataAdapter(command);
                var dataTable = new DataTable();
                adapter.Fill(dataTable);
                ResultsDataGrid.ItemsSource = dataTable.DefaultView;
            }
        }

        private void DownloadPdfButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultsDataGrid.SelectedItem is DataRowView dataRowView)
            {
                // Suponha que você tenha uma coluna de identificação única para cada reserva, como 'ReservationId'
                var reservationId = dataRowView["予約番号"];

                var query = "SELECT pdf_file FROM [GajyunDb].[dbo].[Booking_Data] WHERE 予約番号 = @ReservationId";
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
                byte[] fileContent = null;
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.

                using (var connection = new SqlConnection(_connectionString))
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ReservationId", reservationId);

                    connection.Open();
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
                    fileContent = command.ExecuteScalar() as byte[];
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
                }

                if (fileContent != null)
                {
                    // Salvar o arquivo PDF
                    var saveFileDialog = new Microsoft.Win32.SaveFileDialog
                    {
                        FileName = "予約番号_" + reservationId + ".pdf",
                        DefaultExt = ".pdf",
                        Filter = "PDF documents (.pdf)|*.pdf"
                    };

                    if (saveFileDialog.ShowDialog() == true)
                    {
                        File.WriteAllBytes(saveFileDialog.FileName, fileContent);
                        MessageBox.Show("PDFファイルのダウンロードが完了しました。"); //Download do arquivo PDF concluído.
                    }
                }
                else
                {
                    MessageBox.Show("この予約にはPDFファイルが関連付けられていません。"); //Nenhum arquivo PDF está associado a esta reserva.
                }
            }
            else
            {
                MessageBox.Show("PDFをダウンロードするために、予約を選択してください。"); //Por favor, selecione uma reserva para baixar o PDF.
            }
        }

        private void ViewPdfButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultsDataGrid.SelectedItem is DataRowView dataRowView)
            {
                var reservationId = dataRowView["予約番号"].ToString(); // Certifique-se de converter para string corretamente
#pragma warning disable CS8604 // Possible null reference argument.
                var fileContent = GetPdfBytes(reservationId);
#pragma warning restore CS8604 // Possible null reference argument.

                if (fileContent != null)
                {
                    var tempFilePath = SaveBytesToTempFile(fileContent);

                    try
                    {
                        // Especifique o caminho do executável do Chrome aqui. Pode ser necessário ajustar de acordo com o sistema.
                        string chromePath = @"C:\Program Files\Google\Chrome\Application\chrome.exe";

                        // Inicie o processo do Chrome com o arquivo PDF
                        Process.Start(chromePath, tempFilePath);
                    }
                    catch (Exception ex)
                    {
                        // Trate ou registre o erro adequadamente
                        MessageBox.Show("Falha ao abrir o PDF: " + ex.Message);
                    }
                }
                else
                {
                    MessageBox.Show("PDFファイルが見つかりませんでした。"); // "Nenhum arquivo PDF foi encontrado."
                }
            }
            else
            {
                MessageBox.Show("PDFをダウンロードするために、予約を選択してください。"); // "Por favor, selecione uma reserva para baixar o PDF."
            }
        }




        private byte[] GetPdfBytes(string reservationId)
        {
            var query = "SELECT pdf_file FROM [GajyunDb].[dbo].[Booking_Data] WHERE 予約番号 = @ReservationId";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@ReservationId", reservationId);
                connection.Open();
#pragma warning disable CS8603 // Possible null reference return.
                return command.ExecuteScalar() as byte[];
#pragma warning restore CS8603 // Possible null reference return.
            }
        }

        private string SaveBytesToTempFile(byte[] bytes)
        {
            var tempFilePath = Path.GetTempFileName() + ".pdf";
            File.WriteAllBytes(tempFilePath, bytes);
            return tempFilePath;
        }


        private async void ProcessCSVButton_Click(object sender, RoutedEventArgs e)
        {
            processCsvButton.IsEnabled = false;

            // Carrega as configurações diretamente antes de iniciar o processamento
            _settings = AppSettings.Load(@"..\..\..\..\GajyunETL\bin\Debug\net8.0\appsettings.json");

            try
            {
                // Agora usa o caminho atualizado das configurações
                string csvPath = _settings.FilePaths.CsvPath;
                bool processed = await _csvProcessor.ProcessCsvFiles(csvPath);

                // Verifica se algum arquivo foi processado e exibe a mensagem apropriada
                if (processed)
                {
                    MessageBox.Show("CSVファイルの処理が正常に完了しました！", "成功", MessageBoxButton.OK, MessageBoxImage.Information); //CSV file processing completed successfully!
                    RefreshSearchResults();  // Atualiza os resultados de pesquisa
                }
                else
                {
                    MessageBox.Show("CSVは処理されませんでした。", "情報", MessageBoxButton.OK, MessageBoxImage.Information); //CSV was not processed.
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"CSVファイルの処理に失敗しました：{ex.Message}", "エラー", MessageBoxButton.OK, MessageBoxImage.Error); //Failed to process CSV files: 
            }
            finally
            {
                processCsvButton.IsEnabled = true;
            }
        }

        private async void ProcessPDFButton_Click(object sender, RoutedEventArgs e)
        {
            processPdfButton.IsEnabled = false; // Certifique-se de que você tem um controle com este nome ou ajuste conforme necessário

            // Carrega as configurações diretamente antes de iniciar o processamento
            _settings = AppSettings.Load(@"..\..\..\..\GajyunETL\bin\Debug\net8.0\appsettings.json");

            try
            {
                // Atualiza a instância do PdfProcessor com o caminho e logService atualizados
                _pdfProcessor = new PdfProcessor(_connectionString, _settings.FilePaths.PdfFolderPath, _logService);

                // Chama o método para processar arquivos PDF de forma assíncrona
                bool processed = await _pdfProcessor.ProcessPdfFiles();
                if (processed)
                {
                    MessageBox.Show("PDFファイルの処理が正常に完了しました！", "成功", MessageBoxButton.OK, MessageBoxImage.Information); //PDF file processing completed successfully!
                    RefreshSearchResults();  // Atualiza os resultados de pesquisa
                }
                else
                {
                    MessageBox.Show("処理するPDFファイルが見つかりませんでした。", "情報", MessageBoxButton.OK, MessageBoxImage.Information); //No PDF files were found to process.
                }
            }
            catch (Exception ex)
            {
                // Display a message if an error occurs
                MessageBox.Show($"PDFファイルの処理に失敗しました：{ex.Message}", "エラー", MessageBoxButton.OK, MessageBoxImage.Error); //Failed to process PDF files:
            }
            finally
            {
                processPdfButton.IsEnabled = true;
            }
        }

        private void CopyButton_Click(object sender, RoutedEventArgs e)
        {
            if (ResultsDataGrid.SelectedItem is DataRowView row)
            {
                try
                {
                    // Suponha que '予約番号' seja o nome da coluna no seu DataGrid que contém o número da reserva
                    var reservationNumber = row["予約番号"]?.ToString();

                    if (!string.IsNullOrEmpty(reservationNumber))
                    {
                        Clipboard.SetText(reservationNumber);
                        //MessageBox.Show("予約番号がクリップボードにコピーされました。"); // Reserva copiada para a área de transferência.
                    }
                    else
                    {
                        //MessageBox.Show("選択された予約に予約番号がありません。"); // A reserva selecionada não tem número.
                    }
                }
                catch (Exception ex)
                {
                    // Log the error to a text file
                    LogErrorToFile($"Error copying reservation number to clipboard: {ex.Message}");
                    //MessageBox.Show("クリップボードへのコピー中にエラーが発生しました。詳細はエラーログをご確認ください。"); // Erro ao copiar para a área de transferência. Verifique o log de erros.
                }
            }
            else
            {
                //MessageBox.Show("予約を選択してください。"); // Por favor, selecione uma reserva.
            }
        }

        private void LogErrorToFile(string message)
        {
            var logPath = "errorLog.txt"; // Defina o caminho do arquivo de log conforme necessário
            var logMessage = $"{DateTime.Now}: {message}\n";
            File.AppendAllText(logPath, logMessage);
        }


        private void RefreshSearchResults()
        {
            SearchButton_Click(this, new RoutedEventArgs());
        }
    }
}
